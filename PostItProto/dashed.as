package  {	import flash.display.MovieClip;	import flash.display.Sprite;		//	import org.flashdevelop.utils.FlashConnect;	/**	 * ...	 * @author Karthikeyan VJ	 * @website http://www.getw3help.com	 */	public class dashed	{				// default values ///		private static var _x:Number = 0;		private static var _y:Number = 0;		private static var _width:Number = 151;		private static var _height:Number = 165;				// border propteries ///		private static var borderColor:uint = 0x000000;		private static var borderAlpha:Number = 1;				// rect properites ///		private static var bgColor:uint = 0xffffff;		private static var bgAlpha:Number = 0;				public function dashed() 		{			trace("This is a static class and should not be instantiated.");		}								public static function drawRect(holder:Object = null, param:Object = null):MovieClip {						var i:int = 0;			var dashWidth:Number = 3;			var dashGap:Number = 6;						var dashTempWidth:Number = dashWidth;			// assign user values /////			if (param.x || param.x == 0) {				_x = param.x;			}			if (param.y || param.y == 0) {				_y = param.y;			}			if (param.width || param.width == 0) {				_width = param.width;			}			if (param.height || param.height == 0) {				_height = param.height;			}			if (param.borderColor || param.borderColor == 0) {				borderColor = param.borderColor;			}			if (param.borderAlpha || param.borderAlpha == 0) {				borderAlpha = param.borderAlpha;							}			if (param.bgColor || param.bgColor == 0) {				//FlashConnect.trace(param.bgColor);				bgColor = param.bgColor;			}			if (param.bgAlpha || param.bgAlpha == 0) {				bgAlpha = param.bgAlpha;			}									////						var _mc:MovieClip = new MovieClip();			//holder.addChildAt(_mc,depth);			holder.addChild(_mc);						_mc.x = _x;			_mc.y = _y;												// draw top line ///////////			for (i = 0; i < _width; i += dashGap) {								if ((i + dashWidth) >= _width) {										dashTempWidth = dashWidth - ((i + dashWidth) - _width);									}				_mc.graphics.lineStyle(0, 0x000000, 0, true);				_mc.graphics.beginFill(borderColor, borderAlpha);				_mc.graphics.drawRect(i, 0, dashTempWidth, 1);				_mc.graphics.endFill();							}									// draw left line ///////////			dashTempWidth = dashWidth;			for (i = 0; i < _height; i += dashGap) {												if ((i + dashWidth) >= _height) {										dashTempWidth = dashWidth - ((i + dashWidth) - _height);									}								_mc.graphics.lineStyle(0, 0x000000, 0, true);				_mc.graphics.beginFill(borderColor, borderAlpha);				_mc.graphics.drawRect(_width - 1, i, 1, dashTempWidth);				_mc.graphics.endFill();											}						// draw bottom line ///////			dashTempWidth = dashWidth;			for (i = 0; i < _width; i += dashGap) {								if ((i + dashWidth) >= _width) {										dashTempWidth = dashWidth - ((i + dashWidth) - _width);									}				_mc.graphics.lineStyle(0, 0x000000, 0, true);				_mc.graphics.beginFill(borderColor, borderAlpha);				_mc.graphics.drawRect(i, _height - 1, dashTempWidth, 1);				_mc.graphics.endFill();							}									// draw left line //////////			dashTempWidth = dashWidth;			for (i = 0; i < _height; i += dashGap) {												if ((i + dashWidth) >= _height) {										dashTempWidth = dashWidth - ((i + dashWidth) - _height);									}								_mc.graphics.lineStyle(0, 0x000000, 0, true);				_mc.graphics.beginFill(borderColor, borderAlpha);				_mc.graphics.drawRect(0, i, 1, dashTempWidth);				_mc.graphics.endFill();											}									// draw inner rect /////			_mc.graphics.lineStyle(0, 0x000000, 0, true);			_mc.graphics.beginFill(bgColor, bgAlpha);			_mc.graphics.drawRect(1, 1, _width-2, _height-2);						_mc.graphics.endFill();												return _mc;				}									}	}